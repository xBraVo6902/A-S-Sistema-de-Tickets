datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Person {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role
  firstName      String
  lastName       String
  email          String    @unique
  avatar         String
  phone          String    @unique
  rut            String    @unique
  password       String?   @db.Char(60)
  assigned       Ticket[]  @relation(name: "UserToTicket")
  created        Ticket[]  @relation(name: "ClientToTicket")
  companyRut     String?
  temporaryToken String?
  tokenExpiry    DateTime?
  Message        Message[]
}

enum Role {
  Admin
  User
  Client
}

model Ticket {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String    @db.Text
  description String    @db.Text
  status      Status    @relation(fields: [statusId], references: [id])
  statusId    Int
  type        Type      @relation(fields: [typeId], references: [id])
  typeId      Int
  priority    Priority  @relation(fields: [priorityId], references: [id])
  priorityId  Int
  user        Person?   @relation(name: "UserToTicket", fields: [userId], references: [id])
  userId      Int?
  client      Person    @relation(name: "ClientToTicket", fields: [clientId], references: [id])
  clientId    Int
  notes       Note[]
  messages    Message[]
}

model Note {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prevValue String   @db.Text
  newValue  String   @db.Text
  type      String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  Int
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.Text
  user      Person   @relation(fields: [userId], references: [id])
  userId    Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  Int
}

model Status {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  order      Int
  lucideIcon String
  hexColor   String   @db.Char(7)
  Ticket     Ticket[]
}

model Type {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  lucideIcon String
  hexColor   String   @db.Char(7)
  Ticket     Ticket[]
}

model Priority {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  order      Int
  lucideIcon String
  hexColor   String   @db.Char(7)
  Ticket     Ticket[]
}
